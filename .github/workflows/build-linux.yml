name: Build Application (Linux)

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

env:
  VCPKG_DIR: ${{github.workspace}}/deps/vcpkg
  VCPKG_DEFAULT_TRIPLET: x64-linux
  BUILD_DIR: ${{github.workspace}}/build-linux
  BUILD_TYPE: RelWithDebInfo
  BUILD_ARCHIVE: binaries-with-build-artefacts.zip
  BINARIES_ARCHIVE: binaries.zip

jobs:  

  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
      with:
        submodules: true

  #============================================================================
  #
  #  Configure any/all pre-requisites
  #
  #============================================================================  

    - name: Set up GCC (Linux)
      uses: egor-tensin/setup-gcc@v1
      with:
        version: latest
        platform: x64

    - name: Install CMake
      uses: lukka/get-cmake@latest

    - name: Install 3rd Party Dependencies
      shell: bash
      run: |
        # Core dependencies
        sudo apt-get install -y --no-install-recommends curl libicu66 libssl1.1 libssl-dev make ninja-build pkg-config unzip

  #============================================================================
  #
  #  (All Platforms) Build the application
  #
  #============================================================================      

    - name: Cache vcpkg
      uses: actions/cache@v2
      env:
        cache-name: cache-vcpkg-modules
      with:
        path: |
          "${{env.VCPKG_DIR}}/buildtrees"
          "${{env.VCPKG_DIR}}/downloads"
          "${{env.VCPKG_DIR}}/packages"
          "${{env.VCPKG_DIR}}/vcpkg*"
          "${{env.BUILD_DIR}}/vcpkg_installed"
        key: ${{runner.os}}-build-${{env.cache-name}}-${{hashFiles('**/vcpkg.json')}}
        restore-keys: |
            ${{runner.os}}-build-${{env.cache-name}}-
            ${{runner.os}}-build-
            ${{runner.os}}-

    - name: Build Application
      run: |
        cmake -G Ninja -S ${{github.workspace}} -B ${{env.BUILD_DIR}} -DCMAKE_MAKE_PROGRAM=ninja -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}
        cmake --build ${{env.BUILD_DIR}} --parallel 4 --config ${{env.BUILD_TYPE}}

    - name: Archive Build Binaries
      run: |
        zip -9 -r -q ${{runner.os}}-${{env.BUILD_ARCHIVE}} ${{env.BUILD_DIR}}/
        zip -9 -r -q ${{runner.os}}-${{env.BINARIES_ARCHIVE}} ${{env.BUILD_DIR}}/eagle-to-mqtt 

    - name: Upload Build Artefacts Archive
      uses: actions/upload-artifact@v2
      if: success()
      with:
        name: ${{runner.os}}-artefacts-buildlogs-testbinaries-and-coveragefiles
        path: ${{runner.os}}-${{env.BUILD_ARCHIVE}}
        if-no-files-found: warn 

    - name: Upload Build Binaries Archive
      uses: actions/upload-artifact@v2
      if: success()
      with:
        name: ${{runner.os}}-binaries
        path: ${{runner.os}}-${{env.BINARIES_ARCHIVE}}
        if-no-files-found: error

  #============================================================================
  #
  #  Run the unit and integration tests
  #
  #============================================================================

    - name: Run Unit and Integration Tests
      run: ctest -C ${{env.BUILD_TYPE}} --test-dir ${{env.BUILD_DIR}}
