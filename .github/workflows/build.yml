name: Build Application

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

env:
  BUILD_DIR: ${{github.workspace}}/build
  COVER_DIR: ${{github.workspace}}/build-for-coverage
  VCPKG_DIR: ${{github.workspace}}/deps/vcpkg
  BUILD_TYPE: RelWithDebInfo
  BUILD_ARCHIVE: app-binaries-and-build-artefacts.zip
  COVER_ARCHIVE: test-binaries-and-build-artefacts.zip

jobs:

  #============================================================================
  #
  #  Configure any/all pre-requisites
  #
  #============================================================================      

  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macOS-latest]
        include:
          - os: ubuntu-latest
            vcpkg-triplet: "x64-linux"
          - os: windows-latest
            vcpkg-triplet: "x64-windows"
          - os: macOS-latest
            vcpkg-triplet: "x64-osx"

    steps:
    - uses: actions/checkout@v2
      with:
        submodules: true

    - name: Install 3rd Party Dependencies
      shell: bash
      run: |
        if [ "$RUNNER_OS" == "Linux" ]; then
          sudo apt-get install -y --no-install-recommends curl gcovr libicu66 libssl1.1 libssl-dev pkg-config unzip
        elif [ "$RUNNER_OS" == "Windows" ]; then
          choco install unzip zip
        elif [ "$RUNNER_OS" == "macOS" ]; then
          # Nothing here.
        else
          echo "$RUNNER_OS not supported"
          exit 1
        fi

    - name: Install vcpkg
      shell: bash
      run: |
        export VCPKG_DEFAULT_TRIPLET=${{os.vcpkg-triplet}}
        if [ "$RUNNER_OS" == "Windows" ]; then
          ${{env.VCPKG_DIR}}/bootstrap-vcpkg.bat
        else
          ${{env.VCPKG_DIR}}/bootstrap-vcpkg.sh
        fi
        ${{env.VCPKG_DIR}}/vcpkg integrate install

    - name: Install CMake
      uses: lukka/get-cmake@v3.20.1

    - name: Install SonarQube Build Wrapper
      if: runner.os == 'Linux'
      working-directory: ${{github.workspace}}
      shell: bash
      run: |
        curl -L --output ${{github.workspace}}/build-wrapper-linux-x86.zip https://sonarcloud.io/static/cpp/build-wrapper-linux-x86.zip 
        unzip -o -d ${{github.workspace}} ${{github.workspace}}/build-wrapper-linux-x86.zip

  #============================================================================
  #
  #  (All Platforms) Build the application
  #
  #============================================================================      

    - name: Cache vcpkg
      uses: actions/cache@v2
      id: cache-vcpkg
      with:
        path: |
          "${{env.VCPKG_DIR}}/buildtrees"
          "${{env.VCPKG_DIR}}/downloads"
          "${{env.VCPKG_DIR}}/packages"
          "${{env.VCPKG_DIR}}/vcpkg*"
          "${{env.BUILD_DIR}}/vcpkg_installed"
          "${{env.COVER_DIR}}/vcpkg_installed"
        key: ${{runner.os}}-${{hashFiles('**/vcpkg.json')}}

    - name: Configure CMake
      run: cmake -S ${{github.workspace}} -B ${{env.BUILD_DIR}} -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DCMAKE_TOOLCHAIN_FILE=${{env.VCPKG_DIR}}/scripts/buildsystems/vcpkg.cmake

    - name: Build Application
      run: cmake --build ${{env.BUILD_DIR}} --config ${{env.BUILD_TYPE}} 

    - name: Archive App Binaries
      run: zip -9 -r -q ${{env.BUILD_ARCHIVE}} ${{env.BUILD_DIR}}/

    - name: Upload App Binaries
      uses: actions/upload-artifact@v2
      with:
        name: artefacts-applicationbinaries
        path: |
          ${{env.BUILD_ARCHIVE}}
        if-no-files-found: error

  #============================================================================
  #
  #  (Linux-Only) Build the application and run coverage testing
  #
  #============================================================================

    - name: Configure CMake (With Coverage)
      if: runner.os == 'Linux'
      run: cmake -S ${{github.workspace}} -B ${{env.COVER_DIR}} -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DCMAKE_TOOLCHAIN_FILE=${{env.VCPKG_DIR}}/scripts/buildsystems/vcpkg.cmake -DE2M_OPTION_CODE_COVERAGE=ON -DE2M_OPTION_SUPPORT_SONARQUBE=ON

    - name: Build Application (With Coverage)
      if: runner.os == 'Linux'
      run: build-wrapper-linux-x86/build-wrapper-linux-x86-64 --out-dir ${{env.COVER_DIR}}/bw-output cmake --build ${{env.COVER_DIR}} --config ${{env.BUILD_TYPE}} --target coverage

    - name: Archive Test Binaries
      if: runner.os == 'Linux'
      run: zip -9 -r -q ${{env.COVER_ARCHIVE}} ${{env.COVER_DIR}}/

    - name: Upload Test Binaries Archive
      uses: actions/upload-artifact@v2
      if: success() && runner.os == 'Linux'
      with:
        name: artefacts-buildlogs-testbinaries-and-coveragefiles
        path: |
          ${{env.COVER_ARCHIVE}}
        if-no-files-found: error

  #============================================================================
  #
  #  (Linux-Only) Run the unit and integration tests
  #
  #============================================================================

  test:
    needs: build
    runs-on: ubuntu-latest 

    steps:
    - name: Download App Binaries Archive
      uses: actions/download-artifact@v2
      with: 
        name: artefacts-applicationbinaries

    - name: Unpack App Binaries
      shell: bash
      run: |
        unzip ${{env.BUILD_ARCHIVE}}
        mv home/runner/work/eagle-to-mqtt/eagle-to-mqtt/build .
        rm -r home/runner/work/eagle-to-mqtt/eagle-to-mqtt

    - name: Run Unit and Integration Tests
      run: ctest -C ${{env.BUILD_TYPE}} --test-dir ${{env.BUILD_DIR}}
   
  #============================================================================
  #
  #  (Linux-Only) Perform static analysis and upload coverage reports
  #
  #============================================================================
   
  static_analysis:
    needs: build
    runs-on: ubuntu-latest 
    
    steps:
    - name: Download Test Binaries Archive
      uses: actions/download-artifact@v2
      with: 
        name: artefacts-buildlogs-testbinaries-and-coveragefiles

    - name: Unpack Test Binaries
      shell: bash
      run: |
        unzip ${{env.COVER_ARCHIVE}}
        mv home/runner/work/eagle-to-mqtt/eagle-to-mqtt/build-for-coverage .
        rm -r home/runner/work/eagle-to-mqtt/eagle-to-mqtt

    - name: Initialize CodeQL
      uses: github/codeql-action/init@v1
      with:
        languages: cpp

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v1
  
    - name: Perform SonarCloud Analysis
      uses: sonarsource/sonarcloud-github-action@master
      env: 
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      with:
        projectBaseDir: ${{github.workspace}}
        args: >
          -Dsonar.organization=iainchesworth
          -Dsonar.projectKey=iainchesworth_eagle-to-mqtt
          -Dsonar.cfamily.build-wrapper-output=${{env.COVER_DIR}}/bw-output
          -Dsonar.coverageReportPaths=${{env.COVER_DIR}}/coverage.sonarqube.xml
          -Dsonar.sources=src/
          -Dsonar.test.exclusions=tests/**
          -Dsonar.tests=tests/
          -Dsonar.verbose=true
