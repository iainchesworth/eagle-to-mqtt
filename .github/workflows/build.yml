name: Build Application

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

env:
  BUILD_DIR: ${{github.workspace}}/build
  COVER_DIR: ${{github.workspace}}/build-for-coverage
  VCPKG_DIR: ${{github.workspace}}/deps/vcpkg
  BUILD_TYPE: RelWithDebInfo

jobs:
  #pre-requisites:
  build:
    runs-on: ubuntu-latest  

    steps:
    - uses: actions/checkout@v2
      with:
        submodules: true

    - name: Install 3rd Party Dependencies
      run: sudo apt-get install -y --no-install-recommends curl gcovr libicu66 libssl1.1 libssl-dev pkg-config unzip

    - name: Install vcpkg
      shell: bash
      run: |
        export VCPKG_DEFAULT_TRIPLET=x64-linux
        ${{env.VCPKG_DIR}}/bootstrap-vcpkg.sh
        ${{env.VCPKG_DIR}}/vcpkg integrate install

    - name: Install CMake
      uses: lukka/get-cmake@v3.20.1

    - name: Install SonarQube Build Wrapper
      working-directory: ${{github.workspace}}
      shell: bash
      run: |
        curl -L --output ${{github.workspace}}/build-wrapper-linux-x86.zip https://sonarcloud.io/static/cpp/build-wrapper-linux-x86.zip 
        unzip -o -d ${{github.workspace}} ${{github.workspace}}/build-wrapper-linux-x86.zip
      
  #build:
  #  needs: pre-requisites
  #  runs-on: ubuntu-latest  

  #  steps:
    - name: Cache vcpkg
      uses: actions/cache@v2
      id: cache-vcpkg
      with:
        path: |
          "${{env.VCPKG_DIR}}/buildtrees"
          "${{env.VCPKG_DIR}}/downloads"
          "${{env.VCPKG_DIR}}/packages"
          "${{env.BUILD_DIR}}/vcpkg_installed"
          "${{env.COVER_DIR}}/vcpkg_installed"
        key: vcpkg_installed-${{hashFiles('**/vcpkg.json')}}

    - name: Configure CMake
      run: cmake -S ${{github.workspace}} -B ${{env.BUILD_DIR}} -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DCMAKE_TOOLCHAIN_FILE=${{env.VCPKG_DIR}}/scripts/buildsystems/vcpkg.cmake

    - name: Build Application
      run: cmake --build ${{env.BUILD_DIR}} --config ${{env.BUILD_TYPE}} 

    - name: Archive App Binaries
      run: |
        zip ${{env.BUILD_DIR}}.zip ${{env.BUILD_DIR}}/
        zip eagle-to-mqtt-linux.zip ${{env.BUILD_DIR}}/eagle-to-mqtt

    - name: Upload App Binaries
      uses: actions/upload-artifact@v2
      with:
        name: artefacts-applicationbinaries
        path: |
          ${{env.BUILD_DIR}}.zip
          eagle-to-mqtt-linux.zip

  #build-with-coverage:
  #  needs: pre-requisites
  #  runs-on: ubuntu-latest 

  #  steps:
    - name: Configure CMake (With Coverage)
      run: cmake -S ${{github.workspace}} -B ${{env.COVER_DIR}} -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DCMAKE_TOOLCHAIN_FILE=${{env.VCPKG_DIR}}/scripts/buildsystems/vcpkg.cmake -DE2M_OPTION_CODE_COVERAGE=ON -DE2M_OPTION_SUPPORT_SONARQUBE=ON

    - name: Build Application (With Coverage)
      run: build-wrapper-linux-x86/build-wrapper-linux-x86-64 --out-dir ${{env.COVER_DIR}}/bw-output cmake --build ${{env.COVER_DIR}} --config ${{env.BUILD_TYPE}} --target coverage

    - name: Archive Test Binaries
      run: zip ${{env.COVER_DIR}}.zip ${{env.COVER_DIR}}/

    - name: Upload Test Binaries Archive
      uses: actions/upload-artifact@v2
      if: success()
      with:
        name: artefacts-buildlogs-testbinaries-and-coveragefiles
        path: |
          ${{env.COVER_DIR}}.zip
        if-no-files-found: warn

  test:
    needs: build
    runs-on: ubuntu-latest 

    steps:
    - name: Download App Binaries Archive
      uses: actions/download-artifact@v2
      with: 
        name: ${{env.BUILD_DIR}}.zip

    - name: Unpack App Binaries
      run: unzip ${{env.BUILD_DIR}}.zip

    - name: Run Unit and Integration Tests
      run: ctest -C ${{env.BUILD_TYPE}} --test-dir ${{env.BUILD_DIR}}
      
  static_analysis:
    needs: build
    runs-on: ubuntu-latest 
    
    steps:
    - name: Download Test Binaries Archive
      uses: actions/download-artifact@v2
      with: 
        name: ${{env.COVER_DIR}}.zip

    - name: Unpack Test Binaries
      run: unzip ${{env.COVER_DIR}}.zip

    - name: Initialize CodeQL
      uses: github/codeql-action/init@v1
      with:
        languages: cpp

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v1
  
    - name: Perform SonarCloud Analysis
      uses: sonarsource/sonarcloud-github-action@master
      env: 
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      with:
        projectBaseDir: ${{github.workspace}}
        args: >
          -Dsonar.organization=iainchesworth
          -Dsonar.projectKey=iainchesworth_eagle-to-mqtt
          -Dsonar.cfamily.build-wrapper-output=${{env.COVER_DIR}}/bw-output
          -Dsonar.coverageReportPaths=${{env.COVER_DIR}}/coverage.sonarqube.xml
          -Dsonar.sources=src/
          -Dsonar.test.exclusions=tests/**
          -Dsonar.tests=tests/
          -Dsonar.verbose=true
